# -*- coding: utf-8 -*-
"""Fraud Detection

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nAlyOCWsUdTP1QEa3OiL9eHM6XS3uBLf
"""

import pandas as pd

df=pd.read_csv("/content/creditcard_2023.csv")
df

df.Class.unique()

df.isnull().sum()

df=df.dropna(axis=0)

df.isnull().sum()

df.info()

df.describe()

#replaced mean values
import matplotlib.pyplot as plt
for i in ['id', 'V1', 'V2', 'V3', 'V4', 'V5', 'V6', 'V7', 'V8', 'V9', 'V10',
          'V11', 'V12', 'V13', 'V14', 'V15', 'V16', 'V17', 'V18', 'V19', 'V20',
          'V21', 'V22', 'V23', 'V24', 'V25', 'V26', 'V27', 'V28', 'Amount', 'Class']:
    df[i].plot(kind='box')
    plt.title(f'Box plot of {i}')
    plt.show()

df.head(10)

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score

y = df['Class']
X = df.drop(['Class','id'], axis=1)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)

model = RandomForestClassifier(random_state=42)
from sklearn import preprocessing
from sklearn import utils

lab = preprocessing.LabelEncoder()
y_transformed = lab.fit_transform(y_train)
model.fit(X_train, y_transformed)

# Predictions
y_pred = model.predict(X_test)

# Evaluation
print("Confusion Matrix:")
print(confusion_matrix(y_test, y_pred))
print("\nClassification Report:")
print(classification_report(y_test, y_pred))
print("\nAccuracy:", accuracy_score(y_test, y_pred))

pip install art

df.columns

from art import *
tprint("CREDIT  CARD  FRAUD  DETECTION")



print("Enter the details of the credit card transaction :")
amount=input("Enter the values of Amount:")
V1,V2,V3,V4,V5=input("Enter the paramenter values (V1,V2,V3,V4,V5) :").split()
V6,V7,V8,V9,V10=input("Enter the paramenter values (V6,V7,V8,V9,V10) :").split()
V11,V12,V13,V14,V15,V16=input("Enter the paramenter values (V11,V12,V13,V14,V15,V16) :").split()
V17,V18,V19,V20,V21,V22=input("Enter the paramenter values (V17,V18,V19,V20,V21,V22) :").split()
V23,V24,V25,V26,V27,V28=input("Enter the paramenter values (V23,V24,V25,V26,V27,V28) :").split()

data = pd.DataFrame({
    'V1': [float(V1)],
    'V2': [float(V2)],
    'V3': [float(V3)],
    'V4': [float(V4)],
    'V5': [float(V5)],
    'V6': [float(V6)],
    'V7': [float(V7)],
    'V8': [float(V8)],
    'V9': [float(V9)],
    'V10': [float(V10)],
    'V11': [float(V11)],
    'V12': [float(V12)],
    'V13': [float(V13)],
    'V14': [float(V14)],
    'V15': [float(V15)],
    'V16': [float(V16)],
    'V17': [float(V17)],
    'V18': [float(V18)],
    'V19': [float(V19)],
    'V20': [float(V20)],
    'V21': [float(V21)],
    'V22': [float(V22)],
    'V23': [float(V23)],
    'V24': [float(V24)],
    'V25': [float(V25)],
    'V26': [float(V26)],
    'V27': [float(V27)],
    'V28': [float(V28)],
    'Amount': [float(amount)]
})

ans=model.predict(data)

if ans==1:
  print("The transaction is fraulent !!")
else:
  print("The transaction is safe !!")